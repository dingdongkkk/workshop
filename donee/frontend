import React, { useEffect, useMemo, useState } from "react";

// --- Optional: if you have shadcn/ui installed, uncomment these imports and replace the basic elements below ---
// import { Button } from "@/components/ui/button";
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
// import { Input } from "@/components/ui/input";
// import { Textarea } from "@/components/ui/textarea";

/**
 * Government Scheme Finder – Single-file React app
 * - TailwindCSS for styling
 * - Clean, responsive, production-ready UI
 * - Works with a backend endpoint: POST /api/schemes/search
 *   Body: { age, gender, state, occupation, category, language }
 *   Response: { schemes: Array<{ id, scheme_name, category, state, audience, benefits, eligibility, documents, apply_link, source }>} 
 * - Includes DEMO_MODE fallback with mock data if backend isn't ready
 */

const STATES = [
  "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Delhi",
  "Goa", "Gujarat", "Haryana", "Himachal Pradesh", "Jammu & Kashmir", "Jharkhand",
  "Karnataka", "Kerala", "Madhya Pradesh", "Maharashtra", "Manipur", "Meghalaya",
  "Mizoram", "Nagaland", "Odisha", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu",
  "Telangana", "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal"
];

const CATEGORIES = [
  { value: "business", label: "Business/Entrepreneurship" },
  { value: "education", label: "Education/Scholarship" },
  { value: "health", label: "Healthcare" },
  { value: "agriculture", label: "Agriculture" },
  { value: "employment", label: "Employment/Skilling" },
  { value: "housing", label: "Housing" },
  { value: "other", label: "Other" },
];

const GENDERS = ["Female", "Male", "Non-binary", "Prefer not to say"]; // extend if needed

const DEMO_MODE = true; // set to false when backend is available

const MOCK_SCHEMES = [
  {
    id: "maha-udyogini-yojana",
    scheme_name: "Maharashtra Udyogini Yojana",
    category: "business",
    state: "Maharashtra",
    audience: "Women entrepreneurs (18–55 years)",
    benefits: "Subsidised loans up to ₹3 lakh for micro businesses with interest concessions.",
    eligibility:
      "Resident of Maharashtra; woman applicant; basic KYC; income threshold as per bank norms; viable micro-enterprise plan.",
    documents: "Aadhaar, PAN, residence proof, simple business plan, bank passbook, photos",
    apply_link: "https://mahajobs.gov.in/" ,
    source: "Official state portals / Bank partners"
  },
  {
    id: "pm-mudra",
    scheme_name: "PM MUDRA (Shishu/Kishor/Tarun)",
    category: "business",
    state: "All India",
    audience: "Micro & small businesses",
    benefits: "Collateral-free loans up to ₹10 lakh via member banks/NBFCs.",
    eligibility: "Indian citizen with a non-farm micro enterprise; basic KYC; viable business use.",
    documents: "Aadhaar, PAN, application form, quotations, bank statements",
    apply_link: "https://www.mudra.org.in/",
    source: "Ministry of Finance"
  },
  {
    id: "nsfdc-women-textile",
    scheme_name: "NSFDC – Credit Support for Women (Textiles)",
    category: "business",
    state: "All India",
    audience: "Women from eligible categories starting textile units",
    benefits: "Interest subvention + working capital support via channel partners.",
    eligibility: "As per NSFDC norms; category certificate; bankable project.",
    documents: "KYC, project report, quotations, category certificate",
    apply_link: "https://nsfdc.nic.in/",
    source: "NSFDC"
  },
];

function Label({ children, htmlFor }) {
  return (
    <label htmlFor={htmlFor} className="block text-sm font-medium text-gray-700 mb-1">
      {children}
    </label>
  );
}

function TextInput(props) {
  return (
    <input
      {...props}
      className={`w-full rounded-2xl border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black/70 shadow-sm ${
        props.className || ""
      }`}
    />
  );
}

function Select({ options, value, onChange, id, placeholder }) {
  return (
    <select
      id={id}
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="w-full rounded-2xl border border-gray-300 px-4 py-2 bg-white focus:outline-none focus:ring-2 focus:ring-black/70 shadow-sm"
    >
      <option value="">{placeholder || "Select"}</option>
      {options.map((opt) => (
        <option key={opt.value || opt} value={opt.value || opt}>
          {opt.label || opt}
        </option>
      ))}
    </select>
  );
}

function Pill({ children }) {
  return (
    <span className="inline-flex items-center rounded-full px-3 py-1 text-xs font-medium bg-gray-100 text-gray-800">
      {children}
    </span>
  );
}

function ResultCard({ item, onSave }) {
  return (
    <div className="rounded-2xl border border-gray-200 bg-white shadow-sm p-5 hover:shadow-md transition">
      <div className="flex items-start justify-between gap-4">
        <div>
          <h3 className="text-lg font-semibold leading-tight">{item.scheme_name}</h3>
          <div className="mt-2 flex flex-wrap gap-2 text-xs">
            <Pill>{item.category}</Pill>
            <Pill>{item.state}</Pill>
            {item.audience && <Pill>{item.audience}</Pill>}
          </div>
        </div>
        <button
          onClick={() => onSave?.(item)}
          className="rounded-xl border px-3 py-1 text-sm hover:bg-gray-50"
        >
          Save
        </button>
      </div>

      <div className="mt-4 space-y-3 text-sm text-gray-700">
        {item.benefits && (
          <p><span className="font-medium">Benefits:</span> {item.benefits}</p>
        )}
        {item.eligibility && (
          <p><span className="font-medium">Eligibility:</span> {item.eligibility}</p>
        )}
        {item.documents && (
          <p><span className="font-medium">Documents:</span> {item.documents}</p>
        )}
      </div>

      <div className="mt-4 flex items-center gap-3">
        {item.apply_link && (
          <a
            href={item.apply_link}
            target="_blank"
            rel="noreferrer"
            className="inline-flex items-center rounded-xl bg-black text-white px-4 py-2 text-sm hover:opacity-90"
          >
            Apply / Official Site
          </a>
        )}
        {item.source && <span className="text-xs text-gray-500">Source: {item.source}</span>}
      </div>
    </div>
  );
}

function Empty({ title = "No results", subtitle = "Try adjusting filters or check spelling." }) {
  return (
    <div className="text-center py-16 border-2 border-dashed rounded-2xl">
      <p className="text-lg font-semibold">{title}</p>
      <p className="text-sm text-gray-600 mt-1">{subtitle}</p>
    </div>
  );
}

export default function GovernmentSchemeFinderApp() {
  const [form, setForm] = useState({
    age: "",
    gender: "",
    state: "",
    occupation: "",
    category: "business",
    language: "en",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [results, setResults] = useState([]);
  const [saved, setSaved] = useState([]);
  const [q, setQ] = useState("");
  const [onlyCentral, setOnlyCentral] = useState(false);

  const filtered = useMemo(() => {
    return results.filter((r) => {
      const matchQ = q
        ? (r.scheme_name + " " + (r.benefits || "") + " " + (r.eligibility || "")).toLowerCase().includes(q.toLowerCase())
        : true;
      const matchCentral = onlyCentral ? r.state === "All India" : true;
      return matchQ && matchCentral;
    });
  }, [results, q, onlyCentral]);

  function updateField(k, v) {
    setForm((f) => ({ ...f, [k]: v }));
  }

  async function onSubmit(e) {
    e.preventDefault();
    setError("");
    // Basic validation
    const ageNum = Number(form.age);
    if (!ageNum || ageNum < 1 || ageNum > 120) {
      setError("Please enter a valid age (1–120).");
      return;
    }
    if (!form.state) return setError("Please select a state.");
    if (!form.gender) return setError("Please select a gender.");

    setLoading(true);
    try {
      let payload = {
        age: ageNum,
        gender: form.gender,
        state: form.state,
        occupation: form.occupation,
        category: form.category,
        language: form.language,
      };

      if (DEMO_MODE) {
        // Simulate latency and return mock results filtered by state/category
        await new Promise((r) => setTimeout(r, 800));
        const demo = MOCK_SCHEMES.filter((s) =>
          (s.state === form.state || s.state === "All India") &&
          (form.category ? s.category === form.category : true)
        );
        setResults(demo);
      } else {
        const res = await fetch("/api/schemes/search", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        if (!res.ok) throw new Error(`Request failed: ${res.status}`);
        const data = await res.json();
        setResults(data.schemes || []);
      }
    } catch (err) {
      console.error(err);
      setError("Something went wrong. Please try again.");
    } finally {
      setLoading(false);
    }
  }

  function saveItem(item) {
    setSaved((prev) => (prev.find((x) => x.id === item.id) ? prev : [...prev, item]));
  }

  function exportJSON() {
    const blob = new Blob([JSON.stringify({ form, results }, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `schemes_${form.state || "india"}.json`;
    a.click();
    URL.revokeObjectURL(url);
  }

  function printPDF() {
    window.print();
  }

  useEffect(() => {
    // Pre-fill demo state for faster testing
    setForm((f) => ({ ...f, state: "Maharashtra", gender: "Female" }));
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-gray-50">
      <header className="sticky top-0 z-10 backdrop-blur bg-white/70 border-b">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Government Scheme Finder</h1>
          <div className="flex items-center gap-2">
            <button onClick={exportJSON} className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">Export</button>
            <button onClick={printPDF} className="rounded-xl bg-black text-white px-3 py-2 text-sm hover:opacity-90">Print</button>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 py-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left: Form */}
        <section className="lg:col-span-1">
          <div className="rounded-3xl border bg-white shadow-sm p-6">
            <h2 className="text-lg font-semibold">Your Details</h2>
            <p className="text-sm text-gray-600 mt-1">We use this to match relevant schemes and subsidies.</p>

            <form onSubmit={onSubmit} className="mt-5 space-y-4">
              <div>
                <Label htmlFor="age">Age</Label>
                <TextInput id="age" type="number" min={1} max={120} value={form.age} onChange={(e) => updateField("age", e.target.value)} placeholder="e.g., 23" />
              </div>

              <div>
                <Label htmlFor="gender">Gender</Label>
                <Select id="gender" value={form.gender} onChange={(v) => updateField("gender", v)} options={GENDERS} placeholder="Select gender" />
              </div>

              <div>
                <Label htmlFor="state">State/UT</Label>
                <Select id="state" value={form.state} onChange={(v) => updateField("state", v)} options={STATES} placeholder="Select state" />
              </div>

              <div>
                <Label htmlFor="occupation">Occupation / Goal</Label>
                <TextInput id="occupation" value={form.occupation} onChange={(e) => updateField("occupation", e.target.value)} placeholder="e.g., Starting a textile business" />
              </div>

              <div>
                <Label htmlFor="category">Category</Label>
                <Select id="category" value={form.category} onChange={(v) => updateField("category", v)} options={CATEGORIES} placeholder="Choose category" />
              </div>

              <div>
                <Label htmlFor="language">Language</Label>
                <Select
                  id="language"
                  value={form.language}
                  onChange={(v) => updateField("language", v)}
                  options={[{ value: "en", label: "English" }, { value: "hi", label: "Hindi" }]}
                />
              </div>

              {error && (
                <div className="rounded-xl border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">{error}</div>
              )}

              <button
                type="submit"
                disabled={loading}
                className="w-full rounded-2xl bg-black text-white py-2.5 text-sm font-medium hover:opacity-90 disabled:opacity-50"
              >
                {loading ? "Finding schemes…" : "Find Schemes"}
              </button>
            </form>

            {/* Quick tips */}
            <div className="mt-6 rounded-2xl bg-gray-50 p-4 text-sm text-gray-700">
              <p className="font-medium">Tips:</p>
              <ul className="mt-2 list-disc pl-5 space-y-1">
                <li>Use precise goals (e.g., "set up micro-unit in textiles").</li>
                <li>Central schemes show under <span className="font-medium">All India</span>.</li>
                <li>Try both English/Hindi for broader coverage.</li>
              </ul>
            </div>
          </div>
        </section>

        {/* Right: Results */}
        <section className="lg:col-span-2">
          <div className="flex flex-col md:flex-row md:items-center gap-3 md:gap-4 mb-2">
            <div className="flex-1">
              <TextInput
                placeholder="Search within results (benefits, eligibility, keywords)…"
                value={q}
                onChange={(e) => setQ(e.target.value)}
              />
            </div>
            <label className="inline-flex items-center gap-2 text-sm">
              <input type="checkbox" checked={onlyCentral} onChange={(e) => setOnlyCentral(e.target.checked)} />
              Show only Central (All India)
            </label>
            <button onClick={() => setResults([])} className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">Clear</button>
          </div>

          <div className="grid grid-cols-1 gap-4">
            {filtered.length === 0 && !loading && (
              <Empty title="No schemes yet" subtitle="Fill the form and click ‘Find Schemes’." />
            )}
            {loading && (
              <div className="rounded-2xl border p-6 animate-pulse bg-white">
                <div className="h-5 w-1/3 bg-gray-200 rounded mb-3"></div>
                <div className="h-4 w-2/3 bg-gray-200 rounded mb-2"></div>
                <div className="h-4 w-1/2 bg-gray-200 rounded"></div>
              </div>
            )}
            {!loading && filtered.map((item) => (
              <ResultCard key={item.id} item={item} onSave={saveItem} />
            ))}
          </div>

          {/* Saved drawer */}
          <div className="mt-8">
            <h3 className="text-base font-semibold mb-2">Saved ({saved.length})</h3>
            {saved.length === 0 ? (
              <div className="text-sm text-gray-600">You haven’t saved any schemes yet.</div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {saved.map((s) => (
                  <div key={s.id} className="rounded-2xl border p-4 bg-white">
                    <div className="flex items-start justify-between">
                      <p className="font-medium text-sm pr-4">{s.scheme_name}</p>
                      <a
                        href={s.apply_link}
                        target="_blank"
                        rel="noreferrer"
                        className="text-xs underline"
                      >
                        Apply
                      </a>
                    </div>
                    <div className="mt-2 text-xs text-gray-600 line-clamp-2">{s.benefits}</div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </section>
      </main>

      <footer className="max-w-6xl mx-auto px-4 py-10 text-xs text-gray-500">
        <p>
          Disclaimer: This tool surfaces public information and AI-generated summaries. Always verify on the official portal before applying.
        </p>
      </footer>
    </div>
  );
}
